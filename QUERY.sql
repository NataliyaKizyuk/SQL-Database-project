
--4. From your own schema, DESIGN and WRITE QUERIES that are suitable for the business user you are representing. 
--These queries should demonstrate each of the following:

-- a. Projection 
--k. A query that would be appropriate to the role (see note above) for whom you are writing. 
--K. ALL FOLLOWING QUERY IS APPROPRIATE TO MY ROLE: ACCOUNTER

/*QUERY TO DISPLAY BILL FOR THE CUSTOMER WITH ACCOUNT NUMBER - 800870.. */
SELECT TO_CHAR(DATE_TIME_OF_USAGE,'MM/DD/YYYY') AS DATE_OF_USAGE,TYPE_OF_USAGE,
       PHONE_NO_ACCESSED, ACCESS_PROVIDER, NO_OF_UNITS_USED,
       TO_CHAR(TYPEOFUSAGE.COST_PER_UNIT,'U9,999.99') AS COST_PER_UNIT,
       TO_CHAR(TOTAL_COST,'U9,999.99') AS TOTAL_COST,
       TO_CHAR(BILLING_AMOUNT,'U9,999.99') AS BILLING_AMOUNT, RENEW_DATE
FROM BILL JOIN TYPEOFUSAGE USING (TYPE_OF_USAGE)
WHERE ACCOUNT_NUMBER = 80087009;
--TO DISPLAY OTHER CUSTOMERS BILLS JUST CHANGE TWO LAST DIGITS OF ACCOUNT NUMBER

--b. Selection (Restriction)
/*QUERY TO DISPLAY THE MESSAGES SEND BY EACH CUSTOMER */
SELECT ACCOUNT_NUMBER,
       TO_CHAR(DATE_TIME_OF_USAGE,'MM/DD/YYYY') AS DATE_OF_USAGE,TYPE_OF_USAGE,
       NO_OF_UNITS_USED,
       TO_CHAR(TYPEOFUSAGE.COST_PER_UNIT,'U9,999.99') AS COST_PER_UNIT,
       TO_CHAR(TOTAL_COST,'U9,999.99') AS TOTAL_COST
FROM BILL JOIN TYPEOFUSAGE USING (TYPE_OF_USAGE)
WHERE TYPE_OF_USAGE LIKE '%Message%'
ORDER BY ACCOUNT_NUMBER;

--c. Sorting
/*query that will return the CUSTOMER name and the number of whole days until the
next renewal date for all current CUSTOMERS whose renewal date is in the future */
SELECT ACCOUNT_NUMBER, 
       PHONECUSTOMER.CUSTOMER_NAME, 
       START_DATE, RENEW_DATE,
       ROUND(RENEW_DATE - SYSDATE)"NO_OF_DAYS_LEFT" 
FROM BILL
JOIN MOBILE_ACCOUNT USING (ACCOUNT_NUMBER)
JOIN MYPHONE_SERVICE.PHONECUSTOMER USING (CUSTOMER_ID)
WHERE RENEW_DATE - SYSDATE > 0 
GROUP BY ACCOUNT_NUMBER,PHONECUSTOMER.CUSTOMER_NAME,START_DATE,RENEW_DATE 
ORDER BY ACCOUNT_NUMBER;

--h. Use of JOIN ...USING and joins implemented through the WHERE clause.
/*query that will return the CUSTOMER name and BILLING AMOUNT
for all current CUSTOMERS whose renewal date is in the PAST */
SELECT ACCOUNT_NUMBER, 
       PHONECUSTOMER.CUSTOMER_NAME, 
       START_DATE, RENEW_DATE,
       TO_CHAR(BILLING_AMOUNT,'U9,999.99') AS BILLING_AMOUNT
FROM BILL
JOIN MOBILE_ACCOUNT USING (ACCOUNT_NUMBER)
JOIN MYPHONE_SERVICE.PHONECUSTOMER USING (CUSTOMER_ID)
WHERE RENEW_DATE - SYSDATE <0 
GROUP BY ACCOUNT_NUMBER,PHONECUSTOMER.CUSTOMER_NAME,START_DATE,RENEW_DATE,BILLING_AMOUNT 
ORDER BY ACCOUNT_NUMBER;


--d. Use of non-aggregate functions in the SELECT list.
/*QUERY TO DISPLAY: 1.THE ACCOUNT NUMBER, 
                    2.EACH TYPE OF USAGE ONCE(SUMMARY),
                    3.TOTAL NUMBER OF UNITS USED FOR EACH TYPE OF USAGE, 
                    3.COST PER UNIT, 4.TOTAL COST FOR EACH TYPE OF USAGE,
                    4.BILLING AMOUNT AND  5.RENEW DATE
FOR THE CUSTOMER WITH ACCOUNT NUMBER - 800870.. */
SELECT ACCOUNT_NUMBER, TYPE_OF_USAGE, 
       SUM(NO_OF_UNITS_USED)AS NO_OF_UNITS_USED,
       TO_CHAR(TYPEOFUSAGE.COST_PER_UNIT,'U9,999.99') AS COST_PER_UNIT,
       TO_CHAR(SUM(TOTAL_COST),'U9,999.99') AS TOTAL_COST,
       TO_CHAR(BILLING_AMOUNT,'U9,999.99') AS BILLING_AMOUNT, RENEW_DATE
FROM BILL JOIN TYPEOFUSAGE USING (TYPE_OF_USAGE)
GROUP BY ACCOUNT_NUMBER,TYPE_OF_USAGE,COST_PER_UNIT,BILLING_AMOUNT,RENEW_DATE 
ORDER BY ACCOUNT_NUMBER;

--e. Testing for NULLs
--h. Use of JOIN ...USING.
/*QUERY TO DISPLAY: 1.THE ACCOUNT NUMBER,
                    2.CUSTOMER NAME
                    3.NOT USED(NULL) TYPE OF USAGE ONCE(SUMMARY),
                    4.TOTAL NUMBER OF UNITS USED FOR EACH TYPE OF USAGE, 
FOR THE CUSTOMER THAT HAS NOT USED SOME OF THE SERVICES PROVIDED*/
SELECT ACCOUNT_NUMBER, 
       PHONECUSTOMER.CUSTOMER_NAME, 
       TYPE_OF_USAGE, 
       SUM(NO_OF_UNITS_USED)AS NO_OF_UNITS_USED
FROM BILL
JOIN MOBILE_ACCOUNT USING (ACCOUNT_NUMBER)
JOIN MYPHONE_SERVICE.PHONECUSTOMER USING (CUSTOMER_ID)
JOIN TYPEOFUSAGE USING (TYPE_OF_USAGE)
WHERE NO_OF_UNITS_USED IS NULL
GROUP BY ACCOUNT_NUMBER,PHONECUSTOMER.CUSTOMER_NAME,TYPE_OF_USAGE 
ORDER BY ACCOUNT_NUMBER;

/*QUERY TO DISPLAY: 1.THE ACCOUNT NUMBER, 
                    2.USED(NOT NULL) TYPE OF USAGE ONCE(GROUPED),
                    3.TOTAL NUMBER OF UNITS USED FOR EACH TYPE OF USAGE, 
                    3.COST PER UNIT, 4.TOTAL COST FOR EACH TYPE OF USAGE,
                    4.BILLING AMOUNT AND  5.RENEW DATE
FOR THE CUSTOMER WITH ACCOUNT NUMBER - 800870.. */
SELECT ACCOUNT_NUMBER, TYPE_OF_USAGE, 
       SUM(NO_OF_UNITS_USED)AS NO_OF_UNITS_USED,
       TO_CHAR(TYPEOFUSAGE.COST_PER_UNIT,'U9,999.99') AS COST_PER_UNIT,
       TO_CHAR(SUM(TOTAL_COST),'U9,999.99') AS TOTAL_COST,
       TO_CHAR(BILLING_AMOUNT,'U9,999.99') AS BILLING_AMOUNT, RENEW_DATE
FROM BILL JOIN TYPEOFUSAGE USING (TYPE_OF_USAGE)
WHERE ACCOUNT_NUMBER = 80087010 AND NO_OF_UNITS_USED IS NOT NULL
GROUP BY ACCOUNT_NUMBER,TYPE_OF_USAGE,COST_PER_UNIT,BILLING_AMOUNT,RENEW_DATE 
ORDER BY ACCOUNT_NUMBER;

--f. Aggregation, Aggregation with ‘GROUP BY’ and Aggregation with ‘Having’ clause
--h. Use of JOIN...ON.
/*QUERY TO DISPLAY: 1.THE CUSTOMER NAME, 
                    2.NUMBER OF ACCOUNTS  
                    3.ALL ACCOUNTS IN ONE COLUMN AS LIST
FOR THE CUSTOMER THAT HAS MORE THAN ONE ACCOUNT */ 
SELECT PHONECUSTOMER.CUSTOMER_NAME, COUNT(MOBILE_ACCOUNT.ACCOUNT_NUMBER) AS NumberOfACCOUNTS,
LISTAGG(ACCOUNT_NUMBER, '; ') WITHIN GROUP (ORDER BY ACCOUNT_NUMBER)AS ACCOUNTS
FROM (MYPHONE_SERVICE.PHONECUSTOMER
INNER JOIN MOBILE_ACCOUNT
ON PHONECUSTOMER.CUSTOMER_ID = MOBILE_ACCOUNT.CUSTOMER_ID)
GROUP BY CUSTOMER_NAME
HAVING COUNT(MOBILE_ACCOUNT.ACCOUNT_NUMBER) > 1;


select c_name,
count(UCARDID)AS NUMBEROFVOUCHERS,
TO_CHAR((SUM(MONEYAMOUNT)),'U 9,999.99') AS TOTAL
FROM LOYALTYCARD
JOIN VOUCHER USING(UCARDID)
WHERE LOYALTYCARD.UCARDNO = VOUCHER.UCARDNO 
GROUP BY C_NAME
HAVING COUNT(UCARDNO)>1;

--g. Use of MINUS, INTERSECT and UNION 
/*QUERY TO DISPLAY ACCOUNT NUMBER  AND SERIAL NUMBER THAT ARE THE SAME VALUES 
FOR TWO DIFFERENT TABLES*/
SELECT  ACCOUNT_NUMBER, SERIAL_NUMBER FROM MYPHONE_SERVICE.PHONE_STATUS
UNION
SELECT ACCOUNT_NUMBER, SERIAL_NUMBER  FROM MYPHONE_SERVICE.SIM_CARD;

/*QUERY TO DISPLAY PHONE NAME THAT IS IN STOCK BUT NOBODY BOUGHT IT )*/
SELECT  PHONE_NAME FROM MYPHONE_SERVICE.PHONE_STOCK
MINUS
SELECT PHONE_NAME FROM MYPHONE_SERVICE.SIM_CARD;

/*QUERY TO DISPLAY PHONE NAME THAT IS IN STOCK AND IT IS PURCHASED BY CUSTOMER*/
SELECT  PHONE_NAME FROM MYPHONE_SERVICE.PHONE_STOCK
INTERSECT
SELECT PHONE_NAME FROM MYPHONE_SERVICE.SIM_CARD;

--h. Use of joins implemented through the WHERE clause.
/*QUERY TO DISPLAY WHICH ACCOUNT NUMBER BELONGS TO WHICH CUSTOMER*/    
SELECT ACCOUNT_NUMBER, 
       CUSTOMER_NAME
FROM MOBILE_ACCOUNT, MYPHONE_SERVICE.PHONECUSTOMER
WHERE MOBILE_ACCOUNT.CUSTOMER_ID = MYPHONE_SERVICE.PHONECUSTOMER.CUSTOMER_ID;
   

--i. Use of outer joins. 
/*QUERY TO DISPLAY: 1.THE ACCOUNT NUMBER,   2.THE CUSTOMER ID
                    3.THE CUSTOMER NAME,    4.ACCOUUNT TYPE  
                    5.THE TOTAL COST OF SERVICE USAGE 
                    6.THE MONTHLY CHARGE
FOR THE CUSTOMERS WHICH TOTAL COST OF SERVICE USAGE IS NOT NULL */ 
SELECT ACCOUNT_NUMBER, CUSTOMER_ID, CUSTOMER_NAME,
       ACCOUNT_TYPE, SUM(TOTAL_COST) AS TOTAL_USAGE, MONTHLY_CHARGE  
FROM MYPHONE_SERVICE.PHONECUSTOMER
FULL OUTER JOIN MOBILE_ACCOUNT USING (CUSTOMER_ID)
RIGHT OUTER JOIN BILL USING (ACCOUNT_NUMBER)
GROUP BY ACCOUNT_NUMBER, CUSTOMER_ID, CUSTOMER_NAME, ACCOUNT_TYPE,MONTHLY_CHARGE
ORDER BY CUSTOMER_ID;

--j. Use of Sub-queries (a sub-query must have at least two SELECTs). 
/*QUERY TO DISPLAY CUSTOMERS WHO USED INTERNATIONAL TYPE OF USAGE(ROAMING) */
SELECT ACCOUNT_NUMBER, CUSTOMER_NAME, TYPE_OF_USAGE,SUM(TOTAL_COST)
FROM  BILL
RIGHT OUTER JOIN MOBILE_ACCOUNT USING (ACCOUNT_NUMBER)
RIGHT OUTER JOIN MYPHONE_SERVICE.PHONECUSTOMER USING (CUSTOMER_ID)
WHERE TYPE_OF_USAGE IN (SELECT TYPE_OF_USAGE FROM TYPEOFUSAGE
                        WHERE TYPE_OF_USAGE LIKE '%International%')
GROUP BY ACCOUNT_NUMBER,CUSTOMER_NAME,TYPE_OF_USAGE
ORDER BY ACCOUNT_NUMBER;